// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/task/task.proto

package task

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

// Validate checks the field values on CreateTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTaskReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTaskReplyValidationError is the validation error returned by
// CreateTaskReply.Validate if the designated constraints aren't met.
type CreateTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskReplyValidationError) ErrorName() string { return "CreateTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskReplyValidationError{}

// Validate checks the field values on UpdateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTaskRequestValidationError is the validation error returned by
// UpdateTaskRequest.Validate if the designated constraints aren't met.
type UpdateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskRequestValidationError) ErrorName() string {
	return "UpdateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskRequestValidationError{}

// Validate checks the field values on UpdateTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTaskReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTaskReplyValidationError is the validation error returned by
// UpdateTaskReply.Validate if the designated constraints aren't met.
type UpdateTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskReplyValidationError) ErrorName() string { return "UpdateTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskReplyValidationError{}

// Validate checks the field values on DeleteTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTaskRequestValidationError is the validation error returned by
// DeleteTaskRequest.Validate if the designated constraints aren't met.
type DeleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskRequestValidationError) ErrorName() string {
	return "DeleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskRequestValidationError{}

// Validate checks the field values on DeleteTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTaskReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTaskReplyValidationError is the validation error returned by
// DeleteTaskReply.Validate if the designated constraints aren't met.
type DeleteTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskReplyValidationError) ErrorName() string { return "DeleteTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskReplyValidationError{}

// Validate checks the field values on GetTaskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetTaskRequestValidationError is the validation error returned by
// GetTaskRequest.Validate if the designated constraints aren't met.
type GetTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRequestValidationError) ErrorName() string { return "GetTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRequestValidationError{}

// Validate checks the field values on GetTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetTaskReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetTaskReplyValidationError is the validation error returned by
// GetTaskReply.Validate if the designated constraints aren't met.
type GetTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskReplyValidationError) ErrorName() string { return "GetTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskReplyValidationError{}

// Validate checks the field values on ListTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTaskRequestValidationError is the validation error returned by
// ListTaskRequest.Validate if the designated constraints aren't met.
type ListTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskRequestValidationError) ErrorName() string { return "ListTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskRequestValidationError{}

// Validate checks the field values on ListTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListTaskReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTaskReplyValidationError is the validation error returned by
// ListTaskReply.Validate if the designated constraints aren't met.
type ListTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskReplyValidationError) ErrorName() string { return "ListTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskReplyValidationError{}
